package ca.fraggergames.ffxivextract.shaders;

public class MinifiedShaders {

	protected static String model_vert_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "uniform mat4 uModelMatrix,uViewMatrix,uProjMatrix;"
			+ "attribute vec4 aPosition,aNormal,aTexCoord,aColor,aBiTangent;"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "void main()"
			+ "{"
			+ "vPosition=vec4(uViewMatrix*uModelMatrix*aPosition);"
			+ "vTexCoord=aTexCoord;"
			+ "vNormal=vec4(normalize(aNormal.xyz),aNormal.w);"
			+ "vec4 v=aBiTangent*2./255.-1.;"
			+ "v=normalize(v);"
			+ "vec3 l=v.w*cross(v.xyz,vNormal.xyz);"
			+ "vTBNMatrix=mat4(vec4(l.x,v.x,vNormal.x,0.),vec4(l.y,v.y,vNormal.y,0.),vec4(l.z,v.z,vNormal.z,0.),vec4(0.,0.,0.,1.));"
			+ "vLightDir=(inverse(uViewMatrix*uModelMatrix)*vec4(0.,0.,5.,1.)).xyz;"
			+ "vEyeVec=vec3((inverse(uViewMatrix*uModelMatrix)*vec4(0.,0.,5.,1.)).xyz);"
			+ "vColor=aColor;"
			+ "gl_Position=uProjMatrix*uViewMatrix*uModelMatrix*aPosition;"
			+ "}";

	protected static String character_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform sampler2D uDiffuseTex,uNormalTex,uSpecularTex,uColorSetTex,uMaskTex;"
			+ "uniform bool uHasDiffuse,uHasMask,uHasNormal,uHasSpecular,uHasColorSet;"
			+ "vec3 v=vec3(1.,1.,1.),u=vec3(0.,0.,0.),x=vec3(1.,1.,1.),a=vec3(1.,1.,1.);"
			+ "void main()"
			+ "{"
			+ "vec4 v=vec4(1.,1.,1.,1.),u,l,n,z,d,r,t,c;"
			+ "vec3 i=vNormal.xyz;"
			+ "if(uHasNormal)"
			+ "u=texture2D(uNormalTex,vTexCoord.xy);"
			+ "if(uHasDiffuse)"
			+ "v=texture2D(uDiffuseTex,vTexCoord.xy);"
			+ "if(uHasMask)"
			+ "n=texture2D(uMaskTex,vTexCoord.xy);"
			+ "if(uHasSpecular)"
			+ "l=texture2D(uSpecularTex,vTexCoord.xy);"
			+ "if(uHasNormal&&uHasColorSet)"
			+ "normalize(u),d=texture2D(uColorSetTex,vec2(.125,u.w)),r=texture2D(uColorSetTex,vec2(.375,u.w)),t=texture2D(uColorSetTex,vec2(.625,u.w)),c=texture2D(uColorSetTex,vec2(.875,u.w));"
			+ "if(uHasNormal)"
			+ "{"
			+ "if(u.z<.5)"
			+ "discard;"
			+ "}"
			+ "if(uHasNormal)"
			+ "{"
			+ "vec4 m=u;"
			+ "i=normalize(((m*2.-1.)*vTBNMatrix).xyz);"
			+ "}"
			+ "vec3 m=normalize(vLightDir),y=normalize(vEyeVec),p=normalize(2.*dot(m,i)*i-m),e=normalize(m+y),w=d.xyz;"
			+ "if(uHasDiffuse&&uHasColorSet)" + "w=d.xyz,w+=t.xyz;"
			+ "if(uHasMask&&uHasNormal&&uHasColorSet)"
			+ "w=mix(d.xyz,d.xyz+r.xyz,n.y),v=vec4(v.xyz*w*n.x,1.);"
			+ "if(uHasDiffuse&&uHasColorSet)"
			+ "w=(d+r+t).xyz,v=vec4(v.xyz*w,1.);"
			+ "float s=max(dot(m,i),0.),b=1.-max(dot(m,i),0.);"
			+ "if(uHasMask)" + "b*=n.z;" + "else" + " b=0.;"
			+ "vec3 o=vec3(0.,0.,0.);" + "if(s>0.&&uHasSpecular)" + "{"
			+ "a=l.xyz*r.xyz;" + "float k=max(dot(e,i),0.);"
			+ "if(uHasSpecular)"
			+ "o=vec3(pow(k,l.x*64.),pow(k,l.y*74.),pow(k,l.z*32.));"
			+ "float f=.028,H=pow(max(0.,1.-dot(e,y)),5.),T=H+f*(1.-H);" + "}"
			+ "float f=0.;" + "if(uHasMask)" + "f=n.z*(1.-max(dot(y,i),0.));"
			+ "gl_FragColor=vec4(a*o+x*s*v.xyz,1.);" + "}";

	protected static String blur_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec2 vTexCoord;"
			+ "uniform sampler2D uInTex;"
			+ "uniform vec2 uResolution;"
			+ "uniform float uRadius;"
			+ "uniform vec2 uDir;"
			+ "void main()"
			+ "{"
			+ "vec2 u=vTexCoord;"
			+ "vec4 v=vec4(0.);"
			+ "float r=uRadius/uResolution.x,e=uRadius/uResolution.y,x=uDir.x,y=uDir.y;"
			+ "v+=texture2D(uInTex,vec2(u.x-4.*r*x,u.y-4.*e*y))*.0162162;"
			+ "v+=texture2D(uInTex,vec2(u.x-3.*r*x,u.y-3.*e*y))*.0540541;"
			+ "v+=texture2D(uInTex,vec2(u.x-2.*r*x,u.y-2.*e*y))*.121622;"
			+ "v+=texture2D(uInTex,vec2(u.x-r*x,u.y-e*y))*.194595;"
			+ "v+=texture2D(uInTex,vec2(u.x,u.y))*.227027;"
			+ "v+=texture2D(uInTex,vec2(u.x+r*x,u.y+e*y))*.194595;"
			+ "v+=texture2D(uInTex,vec2(u.x+2.*r*x,u.y+2.*e*y))*.121622;"
			+ "v+=texture2D(uInTex,vec2(u.x+3.*r*x,u.y+3.*e*y))*.0540541;"
			+ "v+=texture2D(uInTex,vec2(u.x+4.*r*x,u.y+4.*e*y))*.0162162;"
			+ "gl_FragColor=vec4(v.xyz,1.);" + "}";

	protected static String default_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform sampler2D uDiffuseTex,uNormalTex,uSpecularTex,uColorSetTex;"
			+ "uniform bool uHasDiffuse,uHasNormal,uHasSpecular,uHasColorSet;"
			+ "void main()" + "{" + "vec4 u=vec4(1.,1.,1.,1.),x,v,y;"
			+ "vec3 r=normalize(vLightDir),e=normalize(vEyeVec);"
			+ "u.xyz=u.xyz*max(dot(vNormal.xyz,r),0.);" + "u=clamp(u,0.,1.);"
			+ "gl_FragColor=vec4(u.xyz,1.);" + "}";

	protected static String fbout_vert_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "attribute vec4 aPosition;"
			+ "varying vec2 vTexCoord;"
			+ "void main()"
			+ "{"
			+ "vTexCoord=(aPosition*.5+.5).xy,gl_Position=vec4(aPosition.xy,0.,1.);"
			+ "}";

	protected static String fxaa_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec2 vTexCoord;"
			+ "uniform vec2 uSize;"
			+ "uniform sampler2D uInTex;\n"
			+ "#define FXAA_REDUCE_MIN (1.0/128.0)\n"
			+ "#define FXAA_REDUCE_MUL (1.0/8.0)\n"
			+ "#define FXAA_SPAN_MAX 8.0\n"
			+ "vec3 D(vec2 v,sampler2D u)"
			+ "{"
			+ "vec3 r;"
			+ "vec2 y=vec2(1./uSize.x,1./uSize.y);"
			+ "vec3 x=texture2D(u,v+vec2(-1.,-1.)*y).xyz,z=texture2D(u,v+vec2(1.,-1.)*y).xyz,m=texture2D(u,v+vec2(-1.,1.)*y).xyz,e=texture2D(u,v+vec2(1.,1.)*y).xyz,a=texture2D(u,v).xyz,X=vec3(.299,.587,.114);"
			+ "float t=dot(x,X),d=dot(z,X),F=dot(m,X),n=dot(e,X),l=dot(a,X),s=min(l,min(min(t,d),min(F,n))),c=max(l,max(max(t,d),max(F,n)));"
			+ "vec2 f;"
			+ "f.x=-(t+d-(F+n));"
			+ "f.y=t+F-(d+n);"
			+ "float D=max((t+d+F+n)*(.25*FXAA_REDUCE_MUL),FXAA_REDUCE_MIN),N=1./(min(abs(f.x),abs(f.y))+D);"
			+ "f=min(vec2(FXAA_SPAN_MAX,FXAA_SPAN_MAX),max(vec2(-FXAA_SPAN_MAX,-FXAA_SPAN_MAX),f*N))*y;"
			+ "vec3 b=.5*(texture2D(u,v+f*(1./3.-.5)).xyz+texture2D(u,v+f*(2./3.-.5)).xyz),g=b*.5+.25*(texture2D(u,v+f*-.5).xyz+texture2D(u,v+f*.5).xyz);"
			+ "float A=dot(g,X);" + "if(A<s||A>c)" + "r=b;" + "else" + " r=g;"
			+ "return r;" + "}" + "void main()" + "{"
			+ "gl_FragColor=texture2D(uInTex,vTexCoord);" + "}";

	protected static String hair_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform vec4 uHairColor,uHighlightColor;"
			+ "uniform sampler2D uNormalTex,uSpecularTex,uColorSetTex;"
			+ "uniform bool uHasNormal,uHasSpecular,uHasColorSet;"
			+ "const vec3 v=vec3(1.,1.,1.),u=vec3(.1,.1,.1),r=vec3(.7,.7,.7),x=vec3(1.,1.,1.);"
			+ "void main()"
			+ "{"
			+ "vec4 v,r,y,z,X,l,m,d;"
			+ "vec3 f=vNormal.xyz;"
			+ "if(uHasNormal)"
			+ "v=texture2D(uNormalTex,vTexCoord.xy);"
			+ "if(uHasSpecular)"
			+ "r=texture2D(uSpecularTex,vTexCoord.xy);"
			+ "if(uHasNormal)"
			+ "{"
			+ "vec4 e=v;"
			+ "f=normalize(((e*2.-1.)*vTBNMatrix).xyz);"
			+ "}"
			+ "vec3 F=normalize(vLightDir),n=normalize(vEyeVec),e=reflect(-F,f),t=normalize(F+n);"
			+ "y=mix(uHairColor,uHighlightColor,r.w)*r.x;"
			+ "y=clamp(y,0.,1.);" + "float a=max(dot(F,f),0.),g=0.;"
			+ "if(a>0.)" + "{" + "float s=max(dot(t,f),0.);" + "g=pow(s,128.);"
			+ "float b=.028,c=pow(max(0.,1-dot(t,n)),5.),N=c+b*(1.-c);"
			+ "g*=N;" + "}" + "float b=smoothstep(.6,1.,1.-max(dot(n,f),0.));"
			+ "gl_FragColor=vec4(u+a*y.xyz+b*y.xyz+g*x,v.w);" + "}";

	protected static String iris_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform vec4 uEyeColor;"
			+ "uniform sampler2D uNormalTex,uSpecularTex,uCatchLightTex;"
			+ "uniform bool uHasNormal,uHasSpecular,uHasCatchLight;"
			+ "void main()"
			+ "{"
			+ "vec4 v,u,x,r,t;"
			+ "vec3 y=vNormal.xyz;"
			+ "if(uHasNormal)"
			+ "v=texture2D(uNormalTex,vTexCoord.xy);"
			+ "if(uHasSpecular)"
			+ "u=texture2D(uSpecularTex,vTexCoord.xy);"
			+ "x=texture2D(uCatchLightTex,vTexCoord.xy);"
			+ "if(uHasNormal)"
			+ "{"
			+ "vec4 e=v;"
			+ "y=normalize(((e*2.-1.)*vTBNMatrix).xyz);"
			+ "}"
			+ "vec3 m=normalize(vLightDir),n=normalize(vEyeVec),d=reflect(-m,y),e=normalize(m+n);"
			+ "t=vec4(uEyeColor.xyz*u.x,1.);"
			+ "t=t*max(dot(y,m),0.);"
			+ "t=clamp(t,0.,1.);"
			+ "float f=.5,X=pow(max(0.,1.-dot(e,n)),5.),c=X+f*(1.-X),g=pow(max(dot(d,n),0.),u.y);"
			+ "g*=c;" + "gl_FragColor=t+x*g;" + "gl_FragColor.w=1.;" + "}";

	protected static String skin_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform sampler2D uDiffuseTex,uNormalTex,uSpecularTex,uColorSetTex;"
			+ "uniform bool uHasDiffuse,uHasNormal,uHasSpecular,uHasColorSet;"
			+ "const vec3 v=vec3(1.,1.,1.),u=vec3(.1,.1,.1),r=vec3(.7,.7,.7),x=vec3(1.,1.,1.);"
			+ "void main()"
			+ "{"
			+ "vec4 v=vColor,t,r,l,n,z,X,d;"
			+ "vec3 y=vNormal.xyz;"
			+ "if(uHasNormal)"
			+ "t=texture2D(uNormalTex,vTexCoord.xy);"
			+ "if(uHasDiffuse)"
			+ "v=texture2D(uDiffuseTex,vTexCoord.xy);"
			+ "if(uHasSpecular)"
			+ "r=texture2D(uSpecularTex,vTexCoord.xy);"
			+ "if(uHasNormal)"
			+ "{"
			+ "if(t.z<.5)"
			+ "discard;"
			+ "}"
			+ "if(uHasNormal)"
			+ "{"
			+ "vec4 e=t;"
			+ "y=normalize(((e*2.-1.)*vTBNMatrix).xyz);"
			+ "}"
			+ "vec3 m=normalize(vLightDir),e=normalize(vEyeVec),f=reflect(m,y),F=normalize(m+e);"
			+ "float b=max(dot(m,y),0.),g=0.;" + "if(b>0.)" + "{"
			+ "float s=max(dot(F,y),0.);" + "g=pow(s,128.);"
			+ "float a=.028,c=pow(max(0.,1.-dot(F,e)),5.),N=c+a*(1.-c);"
			+ "g*=N;" + "}" + "float s=smoothstep(.6,1.,1.-max(dot(e,y),0.));"
			+ "gl_FragColor=vec4(u+b*v.xyz+s*v.xyz+g*x,1.);" + "}";

	protected static String bg_frag_glsl = "#version 150\n"
			+ "precision highp float;\n"
			+ "varying vec4 vPosition,vNormal,vTexCoord,vColor,vBiTangent;"
			+ "varying mat4 vTBNMatrix;"
			+ "varying vec3 vLightDir,vEyeVec;"
			+ "uniform sampler2D uDiffuseTex,uNormalTex,uSpecularTex,uColorSetTex;"
			+ "uniform bool uHasDiffuse,uHasNormal,uHasSpecular,uHasColorSet;"
			+ "void main()" + "{" + "vec4 v=vec4(1.,1.,1.,1.),u,x,t;"
			+ "if(uHasDiffuse)" + "v=texture2D(uDiffuseTex,vTexCoord.xy);"
			+ "if(uHasNormal)" + "u=texture2D(uNormalTex,vTexCoord.xy);"
			+ "vec3 r=normalize(vLightDir),z=normalize(vEyeVec);"
			+ "v.xyz=v.xyz*max(dot(vNormal.xyz,r),0.);" + "v=clamp(v,0.,1.);"
			+ "gl_FragColor=v;" + "}";

	protected static String simple_vert_glsl = "#version 150\n"
			+ "precision highp float;\n" +
			"uniform mat4 uModelMatrix,uViewMatrix,uProjMatrix;attribute vec4 aPosition;void main(){gl_Position=uProjMatrix*uViewMatrix*uModelMatrix*aPosition;}";
	
	protected static String simple_frag_glsl = "#version 150\n"
			+ "precision highp float;\n" +
			"void main(){gl_FragColor=vec4(1.,0.,0.,1.);}";
}
